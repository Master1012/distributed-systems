# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import market_pb2 as market__pb2


class MarketServiceStub(object):
    """Service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSeller = channel.unary_unary(
                '/MarketService/RegisterSeller',
                request_serializer=market__pb2.RegisterSellerRequest.SerializeToString,
                response_deserializer=market__pb2.RegisterSellerResponse.FromString,
                )
        self.SellItem = channel.unary_unary(
                '/MarketService/SellItem',
                request_serializer=market__pb2.SellItemRequest.SerializeToString,
                response_deserializer=market__pb2.SellItemResponse.FromString,
                )
        self.UpdateItem = channel.unary_unary(
                '/MarketService/UpdateItem',
                request_serializer=market__pb2.UpdateItemRequest.SerializeToString,
                response_deserializer=market__pb2.UpdateItemResponse.FromString,
                )
        self.DeleteItem = channel.unary_unary(
                '/MarketService/DeleteItem',
                request_serializer=market__pb2.DeleteItemRequest.SerializeToString,
                response_deserializer=market__pb2.DeleteItemResponse.FromString,
                )
        self.DisplaySellerItems = channel.unary_unary(
                '/MarketService/DisplaySellerItems',
                request_serializer=market__pb2.DisplaySellerItemsRequest.SerializeToString,
                response_deserializer=market__pb2.DisplaySellerItemsResponse.FromString,
                )
        self.SearchItem = channel.unary_unary(
                '/MarketService/SearchItem',
                request_serializer=market__pb2.SearchItemRequest.SerializeToString,
                response_deserializer=market__pb2.SearchItemResponse.FromString,
                )
        self.BuyItem = channel.unary_unary(
                '/MarketService/BuyItem',
                request_serializer=market__pb2.BuyItemRequest.SerializeToString,
                response_deserializer=market__pb2.BuyItemResponse.FromString,
                )
        self.AddToWishlist = channel.unary_unary(
                '/MarketService/AddToWishlist',
                request_serializer=market__pb2.AddToWishlistRequest.SerializeToString,
                response_deserializer=market__pb2.AddToWishlistResponse.FromString,
                )
        self.RateItem = channel.unary_unary(
                '/MarketService/RateItem',
                request_serializer=market__pb2.RateItemRequest.SerializeToString,
                response_deserializer=market__pb2.RateItemResponse.FromString,
                )
        self.RegisterBuyer = channel.unary_unary(
                '/MarketService/RegisterBuyer',
                request_serializer=market__pb2.RegisterBuyerRequest.SerializeToString,
                response_deserializer=market__pb2.RegisterBuyerResponse.FromString,
                )


class MarketServiceServicer(object):
    """Service definitions
    """

    def RegisterSeller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplaySellerItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToWishlist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterBuyer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSeller': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSeller,
                    request_deserializer=market__pb2.RegisterSellerRequest.FromString,
                    response_serializer=market__pb2.RegisterSellerResponse.SerializeToString,
            ),
            'SellItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SellItem,
                    request_deserializer=market__pb2.SellItemRequest.FromString,
                    response_serializer=market__pb2.SellItemResponse.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=market__pb2.UpdateItemRequest.FromString,
                    response_serializer=market__pb2.UpdateItemResponse.SerializeToString,
            ),
            'DeleteItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItem,
                    request_deserializer=market__pb2.DeleteItemRequest.FromString,
                    response_serializer=market__pb2.DeleteItemResponse.SerializeToString,
            ),
            'DisplaySellerItems': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplaySellerItems,
                    request_deserializer=market__pb2.DisplaySellerItemsRequest.FromString,
                    response_serializer=market__pb2.DisplaySellerItemsResponse.SerializeToString,
            ),
            'SearchItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchItem,
                    request_deserializer=market__pb2.SearchItemRequest.FromString,
                    response_serializer=market__pb2.SearchItemResponse.SerializeToString,
            ),
            'BuyItem': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyItem,
                    request_deserializer=market__pb2.BuyItemRequest.FromString,
                    response_serializer=market__pb2.BuyItemResponse.SerializeToString,
            ),
            'AddToWishlist': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToWishlist,
                    request_deserializer=market__pb2.AddToWishlistRequest.FromString,
                    response_serializer=market__pb2.AddToWishlistResponse.SerializeToString,
            ),
            'RateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.RateItem,
                    request_deserializer=market__pb2.RateItemRequest.FromString,
                    response_serializer=market__pb2.RateItemResponse.SerializeToString,
            ),
            'RegisterBuyer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterBuyer,
                    request_deserializer=market__pb2.RegisterBuyerRequest.FromString,
                    response_serializer=market__pb2.RegisterBuyerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MarketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarketService(object):
    """Service definitions
    """

    @staticmethod
    def RegisterSeller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/RegisterSeller',
            market__pb2.RegisterSellerRequest.SerializeToString,
            market__pb2.RegisterSellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/SellItem',
            market__pb2.SellItemRequest.SerializeToString,
            market__pb2.SellItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/UpdateItem',
            market__pb2.UpdateItemRequest.SerializeToString,
            market__pb2.UpdateItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/DeleteItem',
            market__pb2.DeleteItemRequest.SerializeToString,
            market__pb2.DeleteItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplaySellerItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/DisplaySellerItems',
            market__pb2.DisplaySellerItemsRequest.SerializeToString,
            market__pb2.DisplaySellerItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/SearchItem',
            market__pb2.SearchItemRequest.SerializeToString,
            market__pb2.SearchItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/BuyItem',
            market__pb2.BuyItemRequest.SerializeToString,
            market__pb2.BuyItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToWishlist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/AddToWishlist',
            market__pb2.AddToWishlistRequest.SerializeToString,
            market__pb2.AddToWishlistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/RateItem',
            market__pb2.RateItemRequest.SerializeToString,
            market__pb2.RateItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterBuyer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketService/RegisterBuyer',
            market__pb2.RegisterBuyerRequest.SerializeToString,
            market__pb2.RegisterBuyerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SellerNotificationServiceStub(object):
    """Notification service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifySeller = channel.unary_unary(
                '/SellerNotificationService/NotifySeller',
                request_serializer=market__pb2.Notification.SerializeToString,
                response_deserializer=market__pb2.Notification.FromString,
                )


class SellerNotificationServiceServicer(object):
    """Notification service
    """

    def NotifySeller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SellerNotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifySeller': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifySeller,
                    request_deserializer=market__pb2.Notification.FromString,
                    response_serializer=market__pb2.Notification.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SellerNotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SellerNotificationService(object):
    """Notification service
    """

    @staticmethod
    def NotifySeller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SellerNotificationService/NotifySeller',
            market__pb2.Notification.SerializeToString,
            market__pb2.Notification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BuyerNotificationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyClient = channel.unary_unary(
                '/BuyerNotificationService/NotifyClient',
                request_serializer=market__pb2.ItemUpdateNotification.SerializeToString,
                response_deserializer=market__pb2.Notification.FromString,
                )


class BuyerNotificationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifyClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuyerNotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyClient': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyClient,
                    request_deserializer=market__pb2.ItemUpdateNotification.FromString,
                    response_serializer=market__pb2.Notification.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BuyerNotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BuyerNotificationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifyClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BuyerNotificationService/NotifyClient',
            market__pb2.ItemUpdateNotification.SerializeToString,
            market__pb2.Notification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
